<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="netstandard" #>
<#@ assembly name="$(SolutionDir)\\Salient.Data\\bin\\Debug\\netstandard2.0\\Salient.Data.Countermeasure.dll" #>
<#@ assembly name="$(SolutionDir)\\Salient.Data\\bin\\Debug\\netstandard2.0\\Salient.Data.dll" #>
<#@ assembly name="$(SolutionDir)\\Salient.Data\\bin\\Debug\\netstandard2.0\\Extensions.Reps.dll" #>
<#@ assembly name="$(SolutionDir)\\Salient.Data\\bin\\Debug\\netstandard2.0\\Pomelo.EntityFrameworkCore.MySql.dll" #>
<#@ assembly name="$(SolutionDir)\\Salient.Data\\bin\\Debug\\netstandard2.0\\Citms.EntityFrameworkCore.Extended.dll" #>
<#@ assembly name="$(SolutionDir)\\Salient.Data\\bin\\Debug\\netstandard2.0\\Microsoft.Extensions.Identity.Stores.dll" #>
<#@ assembly name="$(SolutionDir)\\Salient.Data\\bin\\Debug\\netstandard2.0\\Microsoft.EntityFrameworkCore.dll" #>
<#@ assembly name="$(SolutionDir)\\Salient.Data\\bin\\Debug\\netstandard2.0\\Microsoft.AspNetCore.Identity.EntityFrameworkCore.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Threading.Tasks" #>
<#@ import namespace="Salient.Data.Countermeasure" #>
<#@ import namespace="Salient.Data.Responses" #>
<#@ output extension=".cs" #>
<#
    var dp=new DataMethodParster();
    var cu=dp.Begin(typeof(UserFileResponse)).Parse(true);
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace <#= cu.NameSpaceName #>
{
    <#
        foreach(var co in cu.ClassOptions)
        {
            WriteLine(co);
        }
    #>
    public class <#= cu.Name#>:Controller
    {
        private readonly <#= cu.ResponseName#> _<#= cu.ResponseName#>;
        public <#= cu.Name#>(<#= cu.ResponseName#> _response)
        {
            this._<#= cu.ResponseName#>=_response;
        }
        <#
            foreach(var c in cu.MethodUnits)
            {
        #>
        <#
            foreach(var o in c.Options)
            {
                WriteLine(o);
            }
            var plist=c.ParamterUnits.Where(p=>!c.Codes.Any(cp=>cp.ReplaceParamter==p.Name)).Select(pu=>
            {
                var res=string.Empty;
                foreach(var p in pu.Options)
                {
                    res+=p;
                }
                res+=$"{pu.TypeName} {pu.Name}";
                return res;
            });
            var inlist=c.ParamterUnits.Select(p=>p.Name);
            var codes=c.Codes.Select(co=>co.GetCode());
            var out1=c.IsAsync?"async Task<":"";
            var out2=c.IsAsync?"> ":"";
            var out3=c.IsAsync?"await ":"";
        #>
        public <#= out1 #>IActionResult <#= out2 #> <#= c.Name#>(<#= string.Join(",",plist) #>)
        {
            <#= string.Join("\n",codes) #>
            return Ok(<#= out3 #>_<#= cu.ResponseName#>.<#= c.Name#>(<#= string.Join(",",inlist)#>));
        }
        <#
        }
        #>
    }

}
